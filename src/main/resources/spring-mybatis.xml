<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.blue.ssm"/>

    <!-- 第一种方式：加载一个properties文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>


    <!-- 第二种方式：加载多个properties文件
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:common.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
    -->

    <!-- 配置数据源 -->
    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClassName" value="${driverClasss}"/>-->
        <!--<property name="url" value="${jdbcUrl}"/>-->
        <!--<property name="username" value="${username}"/>-->
        <!--<property name="password" value="${password}"/>-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="${initialSize}"></property>-->
        <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="${maxActive}"></property>-->
        <!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${maxIdle}"></property>-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="${minIdle}"></property>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${maxWait}"></property>-->
    <!--</bean>-->

    <!--<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">-->
        <!--<property name="slowSqlMillis" value="10000" />-->
        <!--<property name="logSlowSql" value="true" />-->
    <!--</bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>

        <property name="filters" value="stat,log4j,wall" />

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>

        <!--申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效-->
        <property name="testWhileIdle" value="true" />
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnBorrow" value="false" />
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false" />

        <!--有两个含义：-->
        <!--1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。-->
        <!--2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明-->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!--连接保持空闲而不被驱逐的最小时间-->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
    </bean>

    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.blue.ssm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>


    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>